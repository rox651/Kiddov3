---

interface Props {
  title: string;
  details: string;
  tags?: string[];
}

const { title, details, tags = [] } = Astro.props as Props;
---

<div class="accordion group relative border-b border-b-gray-500">
  <button
    class="accordion__button text-white text-3xl cursor-pointer flex w-full flex-1 items-center justify-between gap-2 py-3 text-left font-medium transition hover:text-primary-pink"
    type="button"
    id={`${title} accordion menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion menu content`}
  >
    {title}

  </button>

  <div
    id={`${title} accordion menu content`}
    aria-labelledby={`${title} accordion menu button`}
    class="accordion__content hidden max-h-0 overflow-hidden transition-all duration-300 ease-in-out"
  >
    <p class="prose mb-4 mt-1 max-w-full text-white transition-[height] lg:text-lg">
      {details}
    </p>

    {tags.length > 0 && 
    <ul class="flex gap-4 text-primary-pink pb-5 flex-wrap ">
      {tags.map(tag => <li key={tag} class="border border-primary-pink rounded-4xl py-1 px-3 lg:text-lg">{tag}</li>)}
    </ul>}

  </div>

</div>

<script >
  function accordionSetup() {
    const accordionMenus = document.querySelectorAll(
      ".accordion",
    ) as NodeListOf<HTMLElement>;

    accordionMenus.forEach((accordionMenu) => {
      const accordionButton = accordionMenu.querySelector(
        ".accordion__button",
      ) as HTMLElement;
      const accordionContent = accordionMenu.querySelector(
        ".accordion__content",
      ) as HTMLElement;

      if (accordionButton && accordionContent) {
        accordionButton.addEventListener("click", (event) => {
          // Close all other accordions
          accordionMenus.forEach((otherAccordion) => {
            if (otherAccordion !== accordionMenu && otherAccordion.classList.contains("active")) {
              const otherButton = otherAccordion.querySelector(".accordion__button") as HTMLElement;
              const otherContent = otherAccordion.querySelector(".accordion__content") as HTMLElement;

              otherAccordion.classList.remove("active");
              otherButton.setAttribute("aria-expanded", "false");
              otherContent.style.maxHeight = "0px";
              setTimeout(() => {
                otherContent.classList.add("hidden");
              }, 300);
            }
          });

          // Toggle the current accordion
          if (!accordionMenu.classList.contains("active")) {
            accordionMenu.classList.add("active");
            accordionButton.setAttribute("aria-expanded", "true");
            accordionContent.classList.remove("hidden");
            accordionContent.style.maxHeight =
              accordionContent.scrollHeight + "px";
          } else {
            accordionMenu.classList.remove("active");
            accordionButton.setAttribute("aria-expanded", "false");
            accordionContent.style.maxHeight = "0px";
            setTimeout(() => {
              accordionContent.classList.add("hidden");
            }, 300);
          }
          event.preventDefault();
          return false;
        });
      }
    });
  }

  // runs on initial page load
  accordionSetup();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", accordionSetup);
</script>

